# -*- coding: utf-8 -*-
"""img_processing_updating.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13uMiXb5ml5c9GqsBysoVwzCrftx7KP2V
"""

import multiprocessing
from multiprocessing import freeze_support
import cv2
import numpy as np
from matplotlib import pyplot as plt

radiusArry = []
radiusArryLeft = []
radiusArryRight = []
picNo = []

def annotate_frame(frame, radius, text):
    # Annotate the frame with the radius value
    annotated_frame = frame.copy()
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(annotated_frame, f'{text} Eye Diameter: {round(radius/15.9,3)} mm', (20, 30), font, 1, (255, 255, 255), 2, cv2.LINE_AA)
    return annotated_frame

def detect_pupil(img):
    inv = cv2.bitwise_not(img)
    thresh = cv2.cvtColor(inv, cv2.COLOR_BGR2GRAY)
    kernel = np.ones((2, 2), np.uint8)
    erosion = cv2.erode(thresh, kernel, iterations=1)
    ret, thresh1 = cv2.threshold(erosion, 210, 255, cv2.THRESH_BINARY)
    cnts, hierarchy = cv2.findContours(thresh1, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if len(cnts) != 0:
        c = max(cnts, key=cv2.contourArea)
        (x, y), radius = cv2.minEnclosingCircle(c)
        center = (int(x), int(y))
        radius = int(radius)
        cv2.circle(img, center, radius, (255, 0, 0), 2)
        return img,radius


def iteration(text):
    cap1 = cv2.VideoCapture(text)
    iterration = 0
    while True:
        try:
            success, img = cap1.read()
            img1,radius = detect_pupil(img)
            cv2.waitKey(1)
            iterration += 1
            picNo.append(iterration)
            if text == "test11.mov":
                radiusArryLeft.append(radius)
                annotated_frame = annotate_frame(img, radius,"Left")
                cv2.imshow('Annotated Video ', annotated_frame)
            else:
                radiusArryRight.append(radius)
                annotated_frame = annotate_frame(img, radius,"Right")
                cv2.imshow('Annotated Video ', annotated_frame)
        except:
            break

p1 = multiprocessing.Process(target=iteration, args=['test11.mov'])
p2 = multiprocessing.Process(target=iteration, args=['test4.avi'])
if _name_ == '_main_':
    freeze_support()
    p1.start()
    p2.start()
    p1.join()
    p2.join()
    plt.figure(figsize=(6, 4))
    plt.plot(picNo, radiusArryLeft, 'r-', label='Left')
    plt.plot(picNo, radiusArryRight, 'b-', label='Right')
    plt.title("radiusArry Vs picNo ")
    plt.xlabel('picNo')
    plt.ylabel('radiusArry')
    plt.legend()
    #plt.show()